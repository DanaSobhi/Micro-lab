/* TM4C123G Tiva C Series ADC Example */
/* This Program controls the onboard green LED based on discrete digital value of ADC */
/* If AN0 channel value is less 2048 digital value than LED turns off and otherwise remain on */
#include "TM4C123GH6PM.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

 

#define LCD GPIOB //LCD port with Tiva C
#define RS 0x01 //RS -> PB0 (0x01)
#define RW 0x02 //RW -> PB1 (0x02)
#define EN 0x04 //EN -> PB2 (0x04)
//Functions Declaration
void delayUs(int); //Delay in Micro Seconds
void delayMs(int); //Delay in Milli Seconds
void LCD4bits_Init(void); //Initialization of LCD Dispaly
void LCD_Write4bits(unsigned char, unsigned char); //Write data as (4 bits) on LCD
void LCD_WriteString(char*); //Write a string on LCD
void LCD4bits_Cmd(unsigned char); //Write command
void LCD4bits_Data(unsigned char); //Write a character


//Functions Declaration
void delayUs(int); //Delay in Micro Seconds
volatile unsigned int adc_value;
void ADC0SS3_Handler(void){
adc_value = ADC0->SSFIFO3; /* read adc coversion result from SS3 FIFO*/
ADC0->ISC = 8; /* clear coversion clear flag bit*/
ADC0->PSSI |= (1<<3); /* Enable SS3 conversion or start sampling data from AN0 */
}
int main(void)
{
char* str1 = "Tiva C starting"; //Write any string you want to display on LCD
char s[20];
char de[20];
volatile float voltage;

LCD4bits_Init(); //Initialization of LCD
delayMs(500); //delay 500ms for LCD initialization
LCD4bits_Cmd(0x01); //Clear the display
delayMs(500);
LCD4bits_Cmd(0x80); //Force the cursor to beginning of 1st line
delayMs(500); //delay 500ms for LCD (MCU is faster than LCD)
//LCD_WriteString(str1); //Write the string on LCD
delayMs(500); //Delay 500 ms to let the LCD diplays the data
/* Enable Clock to ADC0 and GPIO pins*/
SYSCTL->RCGCGPIO |= (1<<4); /* Enable Clock to GPIOE or PE3/AN0 */
SYSCTL->RCGCADC |= (1<<0); /* AD0 clock enable*/

/* initialize PE3 for AIN0 input */
GPIOE->AFSEL |= (1<<3); /* enable alternate function */
GPIOE->DEN &= ~(1<<3); /* disable digital function */
GPIOE->AMSEL |= (1<<3); /* enable analog function */

/* initialize sample sequencer3 */
ADC0->ACTSS &= ~(1<<3); /* disable SS3 during configuration */
ADC0->EMUX &= ~0xF000; /* software trigger conversion */
ADC0->SSMUX3 = 0; /* get input from channel 0 */
ADC0->SSCTL3 |= (1<<1)|(1<<2); /* take one sample at a time, set flag at 1st sample */
ADC0->ACTSS |= (1<<3); /* enable ADC0 sequencer 3 */

/*Iniitialize PF3 as a digital output pin */

SYSCTL->RCGCGPIO |= 0x20; // turn on bus clock for GPIOF
GPIOF->DIR |= 0x08; //set GREEN pin as a digital output pin
GPIOF->DEN |= 0x08; // Enable PF3 pin as a digital pin
/* Enable ADC Interrupt */
ADC0->IM |= (1<<3); /* Unmask ADC0 sequence 3 interrupt*/
NVIC->ISER[0] |= 0x00020000; /* enable IRQ17 for ADC0SS3*/
ADC0->ACTSS |= (1<<3); /* enable ADC0 sequencer 3 */
ADC0->PSSI |= (1<<3); /* Enable SS3 conversion or start sampling data from AN0 */
while(1)
{
voltage = (adc_value * 0.0008);

/*control Green PF3->LED */
/* convert digital value back into voltage */
sprintf(de, "Decimal = %d", adc_value);
LCD4bits_Cmd(0x80);
LCD_WriteString(de);
delayMs(100);
sprintf(s, "Voltage = %0.3f", voltage);
LCD4bits_Cmd(0xC0);
LCD_WriteString(s);
if(adc_value >= 2048)
GPIOF->DATA = 0x08; /* turn on green LED*/
else if(adc_value < 2048)
GPIOF->DATA = 0x00; /* turn off green LED*/
delayMs(2000);

}
}

void LCD4bits_Init(void)
{
SYSCTL->RCGCGPIO |= 0x02; //enable clock for PORTB
delayMs(10); //delay 10 ms for enable the clock of PORTB
LCD->DIR = 0xFF; //let PORTB as output pins
LCD->DEN = 0xFF; //enable PORTB digital IO pins
LCD4bits_Cmd(0x28); //2 lines and 5x7 character (4-bit data, D4 to D7)
delayMs(100);
LCD4bits_Cmd(0x06); //Automatic Increment cursor (shift cursor to right)
delayMs(100);
LCD4bits_Cmd(0x01); //Clear display screen
delayMs(100);
LCD4bits_Cmd(0x0F); //Display on, cursor blinking
}
void LCD_Write4bits(unsigned char data, unsigned char control)
{
data &= 0xF0; //clear lower nibble for control
control &= 0x0F; //clear upper nibble for data
LCD->DATA = data | control; //Include RS value (command or data ) with data
LCD->DATA = data | control | EN; //pulse EN
delayUs(10); //delay for pulsing EN
LCD->DATA = data | control; //Turn off the pulse EN
LCD->DATA = 0; //Clear the Data
}
void LCD_WriteString(char * str)
{
volatile int i = 0; //volatile is important
while(*(str+i) != '\0') //until the end of the string
{
LCD4bits_Data(*(str+i)); //Write each character of string
i++; //increment for next character
}
}

void LCD4bits_Cmd(unsigned char command)
{
LCD_Write4bits(command & 0xF0 , 0); //upper nibble first
LCD_Write4bits(command << 4 , 0); //then lower nibble
if(command < 4)
delayMs(2); //commands 1 and 2 need up to 1.64ms
else
delayUs(40); //all others 40 us
}
void LCD4bits_Data(unsigned char data)
{
LCD_Write4bits(data & 0xF0 , RS); //upper nibble first
LCD_Write4bits(data << 4 , RS); //then lower nibble
delayUs(40); //delay for LCD (MCU is faster than LCD)
}
void delayMs(int n)
{
volatile int i,j; //volatile is important for variables incremented in code
for(i=0;i<n;i++)
for(j=0;j<3180;j++) //delay for 1 msec
{}
}
void delayUs(int n)
{
volatile int i,j; //volatile is important for variables incremented in code
for(i=0;i<n;i++)
for(j=0;j<3;j++) //delay for 1 micro second
{}
}
=======================

/* TM4C123G Tiva C Series ADC Example */
/* This Program controls the onboard green LED based on discrete digital value of ADC */
/* If AN0 channel value is less 2048 digital value than LED turns off and otherwise remain on */
#include "TM4C123GH6PM.h"
#include <stdio.h>
#include <stdlib.h>


#define LCD GPIOB //LCD port with Tiva C
#define RS 0x01 //RS -> PB0 (0x01)
#define RW 0x02 //RW -> PB1 (0x02)
#define EN 0x04 //EN -> PB2 (0x04)
//Functions Declaration
void delayUs(int); //Delay in Micro Seconds
void delayMs(int); //Delay in Milli Seconds
void LCD4bits_Init(void); //Initialization of LCD Dispaly
void LCD_Write4bits(unsigned char, unsigned char); //Write data as (4 bits) on LCD
void LCD_WriteString(char*); //Write a string on LCD
void LCD4bits_Cmd(unsigned char); //Write command
void LCD4bits_Data(unsigned char); //Write a character


//Functions Declaration
void delayUs(int); //Delay in Micro Seconds
volatile unsigned int adc_value;
void ADC0SS3_Handler(void){
adc_value = ADC0->SSFIFO3; /* read adc coversion result from SS3 FIFO*/
ADC0->ISC = 8; /* clear coversion clear flag bit*/
ADC0->PSSI |= (1<<3); /* Enable SS3 conversion or start sampling data from AN0 */
}
int main(void)
{
char* str1 = "Tiva C starting"; //Write any string you want to display on LCD
char s[20];
char de[20];
volatile float voltage;

LCD4bits_Init(); //Initialization of LCD
delayMs(500); //delay 500ms for LCD initialization
LCD4bits_Cmd(0x01); //Clear the display
delayMs(500);
LCD4bits_Cmd(0x80); //Force the cursor to beginning of 1st line
delayMs(500); //delay 500ms for LCD (MCU is faster than LCD)
//LCD_WriteString(str1); //Write the string on LCD
delayMs(500); //Delay 500 ms to let the LCD diplays the data
/* Enable Clock to ADC0 and GPIO pins*/
SYSCTL->RCGCGPIO |= (1<<4); /* Enable Clock to GPIOE or PE3/AN0 */
SYSCTL->RCGCADC |= (1<<0); /* AD0 clock enable*/

/* initialize PE3 for AIN0 input */
GPIOE->AFSEL |= (1<<3); /* enable alternate function */
GPIOE->DEN &= ~(1<<3); /* disable digital function */
GPIOE->AMSEL |= (1<<3); /* enable analog function */

/* initialize sample sequencer3 */
ADC0->ACTSS &= ~(1<<3); /* disable SS3 during configuration */
ADC0->EMUX &= ~0xF000; /* software trigger conversion */
ADC0->SSMUX3 = 0; /* get input from channel 0 */
ADC0->SSCTL3 |= (1<<1)|(1<<2); /* take one sample at a time, set flag at 1st sample */
ADC0->ACTSS |= (1<<3); /* enable ADC0 sequencer 3 */

/*Iniitialize PF3 as a digital output pin */

SYSCTL->RCGCGPIO |= 0x20; // turn on bus clock for GPIOF
GPIOF->DIR |= 0x08; //set GREEN pin as a digital output pin
GPIOF->DEN |= 0x08; // Enable PF3 pin as a digital pin
/* Enable ADC Interrupt */
ADC0->IM |= (1<<3); /* Unmask ADC0 sequence 3 interrupt*/
NVIC->ISER[0] |= 0x00020000; /* enable IRQ17 for ADC0SS3*/
ADC0->ACTSS |= (1<<3); /* enable ADC0 sequencer 3 */
ADC0->PSSI |= (1<<3); /* Enable SS3 conversion or start sampling data from AN0 */
while(1)
{
voltage = (adc_value * 0.0008);

/*control Green PF3->LED */
/* convert digital value back into voltage */
sprintf(de, "Decimal = %d", adc_value);
LCD4bits_Cmd(0x80);
LCD_WriteString(de);
delayMs(100);
sprintf(s, "Voltage = %0.3f", voltage);
LCD4bits_Cmd(0xC0);
LCD_WriteString(s);
if(adc_value >= 2048)
GPIOF->DATA = 0x08; /* turn on green LED*/
else if(adc_value < 2048)
GPIOF->DATA = 0x00; /* turn off green LED*/
delayMs(2000);

}
}

void LCD4bits_Init(void)
{
SYSCTL->RCGCGPIO |= 0x02; //enable clock for PORTB
delayMs(10); //delay 10 ms for enable the clock of PORTB
LCD->DIR = 0xFF; //let PORTB as output pins
LCD->DEN = 0xFF; //enable PORTB digital IO pins
LCD4bits_Cmd(0x28); //2 lines and 5x7 character (4-bit data, D4 to D7)
delayMs(100);
LCD4bits_Cmd(0x06); //Automatic Increment cursor (shift cursor to right)
delayMs(100);
LCD4bits_Cmd(0x01); //Clear display screen
delayMs(100);
LCD4bits_Cmd(0x0F); //Display on, cursor blinking
}
void LCD_Write4bits(unsigned char data, unsigned char control)
{
data &= 0xF0; //clear lower nibble for control
control &= 0x0F; //clear upper nibble for data
LCD->DATA = data | control; //Include RS value (command or data ) with data
LCD->DATA = data | control | EN; //pulse EN
delayUs(10); //delay for pulsing EN
LCD->DATA = data | control; //Turn off the pulse EN
LCD->DATA = 0; //Clear the Data
}
void LCD_WriteString(char * str)
{
volatile int i = 0; //volatile is important
while(*(str+i) != '\0') //until the end of the string
{
LCD4bits_Data(*(str+i)); //Write each character of string
i++; //increment for next character
}
}

void LCD4bits_Cmd(unsigned char command)
{
LCD_Write4bits(command & 0xF0 , 0); //upper nibble first
LCD_Write4bits(command << 4 , 0); //then lower nibble
if(command < 4)
delayMs(2); //commands 1 and 2 need up to 1.64ms
else
delayUs(40); //all others 40 us
}
void LCD4bits_Data(unsigned char data)
{
LCD_Write4bits(data & 0xF0 , RS); //upper nibble first
LCD_Write4bits(data << 4 , RS); //then lower nibble
delayUs(40); //delay for LCD (MCU is faster than LCD)
}
void delayMs(int n)
{
volatile int i,j; //volatile is important for variables incremented in code
for(i=0;i<n;i++)
for(j=0;j<3180;j++) //delay for 1 msec
{}
}
void delayUs(int n)
{
volatile int i,j; //volatile is important for variables incremented in code
for(i=0;i<n;i++)
for(j=0;j<3;j++) //delay for 1 micro second
{}
}
===========================

/* TM4C123G Tiva C Series ADC Example */
/* This Program controls the onboard green LED based on discrete digital value of ADC */
/* If AN0 channel value is less 2048 digital value than LED turns off and otherwise remain on */
#include "TM4C123GH6PM.h"
#include <stdio.h>
#include <stdlib.h>

//Functions Declaration
volatile unsigned int adc_value;
void ADC0SS3_Handler(void){
adc_value = ADC0->SSFIFO3; /* read adc coversion result from SS3 FIFO*/
ADC0->ISC = 8; /* clear coversion clear flag bit*/
ADC0->PSSI |= (1<<3); /* Enable SS3 conversion or start sampling data from AN0 */
}
int main(void)
{
volatile float voltage;
/* Enable Clock to ADC0 and GPIO pins*/
SYSCTL->RCGCGPIO |= (1<<4); /* Enable Clock to GPIOE or PE3/AN0 */
SYSCTL->RCGCADC |= (1<<0); /* AD0 clock enable*/

/* initialize PE3 for AIN0 input */
GPIOE->AFSEL |= (1<<3); /* enable alternate function */
GPIOE->DEN &= ~(1<<3); /* disable digital function */
GPIOE->AMSEL |= (1<<3); /* enable analog function */

/* initialize sample sequencer3 */
ADC0->ACTSS &= ~(1<<3); /* disable SS3 during configuration */
ADC0->EMUX &= ~0xF000; /* software trigger conversion */
ADC0->SSMUX3 = 0; /* get input from channel 0 */
ADC0->SSCTL3 |= (1<<1)|(1<<2); /* take one sample at a time, set flag at 1st sample */
ADC0->ACTSS |= (1<<3); /* enable ADC0 sequencer 3 */

/*Iniitialize PF3 as a digital output pin */

SYSCTL->RCGCGPIO |= 0x20; // turn on bus clock for GPIOF
GPIOF->DIR |= 0x0A; //set red AND green pin as a digital output pin
GPIOF->DEN |= 0x0A; // Enable red AND green pins as a digital pin
while(1)
{

ADC0->PSSI |= (1<<3); /* Enable SS3 conversion or start sampling data from AN0 */
while((ADC0->RIS & 8) == 0) ; /* Wait untill sample conversion completed*/
adc_value = ADC0->SSFIFO3; /* read adc coversion result from SS3 FIFO*/
ADC0->ISC = 8; /* clear coversion clear flag bit*/
/* convert digital value back into voltage */
voltage = (adc_value * 0.0008);
if(adc_value >= 1000)
GPIOF->DATA = 0x02; /* turn on red LED*/

else if(adc_value < 1000)
GPIOF->DATA = 0x08; /* turn green LED*/
}
}